[[{"l":"Welcome","p":["Static site motlin.com","The same content is available with commenting enabled at motlin.medium.com"]}],[{"i":"java-has-streams-do-we-need-third-party-collections","l":"Java has Streams. Do we need third-party collections?","p":["Java 8 added Streams. Are competing collections libraries like Eclipse Collections, Trove, Guava, etc. effectively deprecated now?","I saw this question on StackOverflow, specifically about Eclipse Collections. Here is my answer.","Is there any reason to still use Eclipse Collections? Yes! Streams are a huge step forward, and a welcome improvement to Java. However, Eclipse Collections includes many features not yet in the JDK.","Eager evaluation","Efficient Maps and Sets","Multimaps and Bags","Immutable Collections","Primitive Collections","Hashing Strategies"]},{"l":"Eager Evaluation","p":["Streams always use lazy evaluation. We start a stream by calling collection.stream(), stack one or more lazy operations, and finish the stream by calling a method like collect().","With Eclipse Collections, you may use lazy evaluation. Instead of stream() you’d call asLazy().","Or you may use the eager api.","Lazy evaluation is great when your computation may short circuit, or when the result is reduced down to a primitive, like a boolean or count. Otherwise, there’s usually a performance penalty when using lazy evaluation, and the code winds up a lot longer."]},{"l":"Efficient Maps and Sets","p":["The JDK’s HashMap is implemented as a table of Entry objects, where each Entry wraps a key-value pair. These entries waste memory, and the extra hop can waste time too.","Eclipse Collections includes UnifiedMap, which uses 50% the memory on average.","The JDK’s HashSet is implemented by delegating to a HashMap and just ignoring the Map’s values, which is even more wasteful. Eclipse Collections includes UnifiedSet, which uses 25% the memory on average.","Trove, FastUtils, HPPC, and others have similar replacements for HashMap and HashSet.","These issues with HashMap and HashSet have been around since the collections library was added back in Java 1.2. They are unlikely ever to be fixed due to backwards compatibility concerns."]},{"l":"Multimaps and Bags","p":["Multimaps are like Maps where each key maps to multiple values. Bags, aka multisets, are like Sets where each item is mapped to a count, or number of occurrences.","Guava popularized these types in Java. Keep in mind that Guava doesn’t implement replacements for built-in types. So Guava’s HashMultimap is backed by a HashMapK, HashSetV which wastes a lot of memory as we just learned.","Eclipse Collections includes iteration patterns like groupBy() which return efficient Multimaps. In this example people is a MutableSet so groupBy() returns a MutableSetMultimap(backed by a UnifiedMap of UnifiedSets).","Java 8 added grouping but no multimaps.","A Map isn’t quite as convenient as a Multimap, because we have to always remember to deal with null. With Streams, we also have to remember to use the right collector to match the collection. If we had used the single-argument groupingBy() we would have returned a map of lists.","The same points apply to counting…","…and to Bags"]},{"l":"Immutable Collections and Primitive Collections","p":["Most third party collections libraries add immutable collections or primitive collections. Eclipse Collections adds both. The JDK has unmodifiable wrappers, but no immutable collections. Java 8 added primitive streams, but there’s no way to finish the stream by collecting into a primitive collection."]},{"l":"Hashing Strategies","p":["In relational databases, a table may have a primary key and additional unique indices, allowing lookups in different ways. Hash tables always perform lookups using equals and hashcode, which is like only allowing a primary key. This is where HashingStrategy comes in.","Eclipse Collections includes iteration patterns that work with HashingStrategies…","… and data structures that work with HashingStrategies."]},{"l":"Conclusion","p":["As future versions of Java pull in more features, there will be less of a need for third-party collections libraries. For now, they provide compelling features beyond what’s included in the JDK."]},{"l":"Comments","p":["Leave a comment on medium"]}],[{"i":"which-log-level","l":"Which Log Level?","p":["A coworker introduced me to the excellent article Logging levels: the wrong abstraction which is unfortunately down.","The TL;DR is that developers without a shared understanding of logging severities (error, warning, info, and debug) will choose the wrong level.","The suggestions from the original article:","ERROR: Oh-oh, call the fireman! This needs to be investigated now!","WARN: someone in the team will have to investigate what happened, but it can wait until tomorrow.","INFO: information you will need to debug production issues.","DEBUG: information that is useful during development. Usually very chatty, and will not show in production.","The most important and memorable parts are the timings. My additions:","ERROR should alert an on-call engineer and be dealt with quickly. The alert may interrupt their sleep or personal lives. These alerts should be rare.","WARN logs should be investigated the same day. They can be investigated in batches.","INFO log volume should be less than 10% of DEBUG logs, and ideally should be \"tail -f\"able.","DEBUG logs tend to be voluminous and should be pruned."]},{"l":"ERROR","p":["ERROR: Oh-oh, call the fireman! This needs to be investigated now!","Error logs should alert the on-call engineer and interrupt whatever they are doing. We use PagerDuty to send push notifications to the engineer's personal phone.","These alerts can be the worst part of an on-call rotation. If the alert volume is too high, engineers may mute them. Engineers quit their jobs over this. I like to run alert-review meetings with the team to prune alerts.","When deciding whether to keep or delete an alert, we should ask \"Was this alert urgent enough to interrupt the engineer's lunch or sleep?\" and downgrade the severity if the answer is \"no\". It's important not to ask \"Was this alert actionable?\" since the answer is often yes, which leads to \"hoarding\" alerts. When it doubt, downgrade the severity.","I'm willing to tolerate about 1 error per day during normal business hours, and a few per year outside normal business hours."]},{"l":"WARN","p":["WARN: someone in the team will have to investigate what happened, but it can wait until tomorrow.","The primary purpose of WARN logs are to provide more context about an ERROR. However, WARN tends to be a home for a few other types of logs.","During incident review, ERROR logs often get demoted to WARN. Often, these logs aren't even useful to review in batches, and ought to get demoted a second time to DEBUG.","A lot of new logging starts out at WARN and if they turn out not to be useful, they can be demoted to DEBUG. New features often start with WARN logging that can get promoted to ERROR. If an incident occurs and during incident review we decide that the on-call was not made aware quickly enough, we may promote the logging severity.","WARN, not ERROR, ought to be the default choice for new catch blocks, until we have an opportunity to re-categorize."]},{"l":"INFO","p":["INFO: information you will need to debug production issues.","INFO logs should serve as a summary of the DEBUG logs. INFO logs should come in at a pace that a human can read, at least if filtering to a single user.","If a user is clicking around on a website, we can only log one or two times for each interaction, if we expect a human to be able to keep pace."]},{"l":"DEBUG","p":["DEBUG: information that is useful during development. Usually very chatty, and will not show in production.","Use DEBUG for text that gets logged too quickly for a human to read with tail -f.","If a user clicks a button and the service logs 10 times while responding, almost all of that logging should be at the DEBUG level."]},{"l":"Conclusion","p":["I think these semantics are complementary to the ones expressed in the original article and help refine them.","For more discussion, see this StackOverflow question."]}],[{"l":"Git Configuration","p":["This post is about one-time git configuration; commands that start with git config --global.","These settings are a subset of my configuration that I'm comfortable recommending for any user on any machine. I've gathered git configuration from the git-scm book, the GitHub Blog, Julia Evans, and Scott Chacon.","Even after running these commands, you may still want to copy from my .gitconfig since it includes comments."]},{"l":"Aliases"},{"l":"Shorthand aliases","p":["The git-scm book includes a few aliases that have become very common.","Here are a few of my own that seem to be pretty common.","And a few more of my own that aren't too common, but you might like."]},{"l":"Plural aliases","p":["git has inconsistent commands to list all branches, tags, stashes, workrees, remotes, and aliases."]},{"l":"StackOverflow aliases","p":["Use git root to get the root directory of the repository.","Use git first to get the initial commit(s) that are ancestors of HEAD.","git push --force-with-lease is a safer alternative to git push --force that ensures that you've at least fetched/seen the history that you're about to wipe out.","There is no way to configure git to always use force-with-lease instead of force. The next best available option is to create an alias."]},{"l":"Log aliases","p":["You can view a nice graph of your git history with git log --decorate --graph --oneline. You can get fancy with the --format option. These aliases all use the same format, but display different subsets of refs.","l for specified branches or HEAD, as in git l main.","la for almost all branches and refs, excluding refs/notes, refs/stash, dependabot stuff, and pull requests.","laa for truly all refs.","decorate is like la, but with --simplify-by-decoration.","The common formatting options deserve a little explanation.","%C(auto)%(decorate:prefix=\uD83D\uDC47 ,suffix=%n,tag=,separator= )%C(reset) ref names, like the --decorate option but on a separate line, like * upstream/pr/123.","%C(brightyellow)%h%C(reset) abbreviated commit hash in bright yellow, like 63978b049.","%C(normal)%|(-50,trunc)%s%C(reset) subject (commit message) truncated 50 characters away from the right edge of the screen.","%C(brightmagenta)%(15,trunc)%an%C(reset) author name truncated to 15, in bright magenta.","%C(brightblue)%ad%C(reset) author date, in bright blue, like 2000-12-31.","%C(brightcyan)%ar%C(reset)% author date, relative, in bright cyan, like 10 days ago.","git fancy log"]},{"l":"Fetch and Push","p":["git push behavior varies based on the push.default setting. Possible values are nothing, current, upstream, tracking, simple, and matching. The default changed from matching to simple in Git 2.0.","I prefer current because it is intuitive. It pushes the current branch to a branch of the same name on the remote. If the remote branch doesn't exist, it creates one."]},{"l":"Diff","p":["By default, git detects copies but not renames. Turning on rename detection supposedly slows down git diff but I haven't noticed a difference.","git diff should use a prefix pair that is different from the standard\"a/\" and \"b/\" depending on what is being compared. This option is only relevant when not piping through a pager/formatter like diff-so-fancy."]},{"l":"Branches"},{"l":"Branch","p":["Scott Chacon wrote a 3-part series called Git Tips and Tricks. A few tips cover global config.","One thing that's always bugged me about Git is that I run git branch a lot to view what branches I have, but they're in the dumbest possible order (alphabetic) and there are a million of them after a while.","We can configure git to sort by \"negative committer date.\"","Git also has a way to take a list of branches and try to split it into columns to make better use of the screen real estate. You can do this either with the new --column option, or with the column.ui setting.","It is idiomatic to name the first/main branch main. It used to be idiomatic to name it master and and unconfigured git init call will still create a master branch and print this hint.","Configuring the default branch name suppresses this hint."]},{"l":"Merge and rebase","p":["git can auto-stash before a merge or rebase. This means that you can run merge or rebase in a dirty worktree.","git can prevent merge commits by default.","git can warn or error if commits are missing during an interactive rebase to prevent accidental deletion of commits.","git can automatically force-update any branches that point to commits that are being rebased.","When a new branch is created with git branch or git checkout that tracks another branch, git should set up pull to rebase instead of merge.","git should set up new branches so that git-pull will merge from the starting point branch."]},{"l":"Rerere","p":["According to the git-scm book:","The git rerere functionality is a bit of a hidden feature. The name stands for \"reuse recorded resolution\" and, as the name implies, it allows you to ask Git to remember how you've resolved a hunk conflict so that the next time it sees the same conflict, Git can resolve it for you automatically.","This feature is off by default, but there's no downside to enabling it.","For convenience, configure rerere to stage changes automatically. This skips the git add step and makes it clear when rerere has resolved a merge conflict, as git status will show no unstaged changes."]},{"l":"Log","p":["git log has a --follow option that continues listing the history of a file beyond renames. This option only works for a single file.","We can configure git to act as if the --follow option was used when a single path is given.","git log has an option--decorate that displays the ref names of any logged commits. git can be configured to always show these ref names.","If short is specified, the ref name prefixes refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is specified, the full ref name (including prefix) will be printed."]},{"l":"Commit","p":["The docs for git commit --verbose say:","Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template to help the user describe the commit by reminding what changes the commit has.","This diff shows up in the same editor where you write the commit message, and can be helpful for auto-completing identifier names that appear in code.","We can set commit.verbose to always show this diff."]},{"l":"Submodules","p":["If you don't use submodule, you can skip this section.","Diffs of submodules should show the changed contents rather than a list of commits.","git status should show a summary of commits for modified submodules."]},{"l":"Include","p":["After following the advice here, you'll have a ~/.gitconfig file that you may want to share between machines. I keep mine in a dotfiles repository and sync it using dotbot. This setup requires splitting out machine-specific configuration into a separate file.","Git supports including other configuration files with the include directive.","I like to move the entire user section into ~/.gitconfig.local.","I follow GitHub's advice to set user.useConfigOnly to avoid git guessing my email address.","if, say, you want Git to use one email address for your open source projects and a different one for your work projects, you’ve undoubtedly made the mistake of committing to a new Git repository without having first set your email address in that repository. In this situation, Git emits a warning, but it creates the commit anyway, using an email address that it guesses from the local system hostname. If you’re trying to do something as complicated as different addresses for different projects, this is almost certainly not what you want."]},{"l":"Performance"},{"l":"Caching","p":["In Improve Git monorepo performance with a file system monitor, the GitHub blog recommends turning on the built-in file system monitor and untracked cache to speed up subsequent git commands like git status in a working directory with many files."]},{"l":"Fast Merging","p":["The GitHub Blog recommends using the ort merge strategy for merges over the default recursive strategy because it's 500x faster.","The new merge-ort is likely to become the default strategy in a future version of Git.","In the meantime you can configure it with:"]},{"l":"Git Maintenance","p":["The git maintenance command registers a repository for periodic background optimizations.","Run tasks to optimize Git repository data, speeding up other Git commands and reducing storage requirements for the repository.","Git commands that add repository data, such as git add or git fetch, are optimized for a responsive user experience. These commands do not take time to optimize the Git data, since such optimizations scale with the full size of the repository while these user commands each perform a relatively small action.","The git maintenance command provides flexibility for how to optimize the Git repository.","The list of repositories is machine specific. After running git maintenance, move the list of repositories from ~/.gitconfig to ~/.gitconfig.local."]},{"l":"Comments","p":["Leave a comment on medium"]}],[{"l":"Removing Redundant Git Configuration","p":["Git's default configuration values have improved over time. Bad default values were replaced, and new features were released disabled and later enabled by default.","It's difficult to know if a line in your ~/.gitconfig is redundant because Git has no way to print default values. This script includes a hard-coded list of known improvements to defaults.","The script is arranged in chronological order of when the default value was changed. You can copy the script up to the version of Git that you're running, or run the whole thing if you're running the latest."]},{"l":"Comments","p":["If you know of additional redundant configurations that should be added, please head over to Medium and leave a comment."]}],[{"i":"pre-commit-or-cicd","l":"Pre-Commit or CI/CD","p":["At work, we're moving from a proprietary SDLC to a more open-source process. This shift has prompted questions that have me re-evaluating aspects of the development process I've long taken for granted.","One recurring question is whether linting tools should run as part of the continuous integration/continuous deployment (CI/CD) pipeline, as pre-commit hooks, or both. Let's explore the pros and cons."]},{"l":"Pre-commit hooks","p":["Why push code that won't pass the linter? With CI/CD, the developers get feedback only after they've pushed their changes.","Pre-commit hooks get feedback to the developer as soon as possible."]},{"i":"cicd","l":"CI/CD","p":["Pre-commit hooks must be installed in every development environment, for every new joiner.","The main benefit of running linters as part of the CI/CD pipeline is uniform enforcement. A linter in the CI/CD pipeline cannot be forgotten."]},{"i":"pre-commit-hooks-would-be-great-if-everyone-would-just-use-them","l":"Pre-commit hooks would be great, if everyone would just use them","p":["In pre-commit utopia, everyone runs pre-commit hooks, making CI/CD linting redundant.","If even one contributor doesn't use pre-commit hooks, the hooks cause issues for everyone else. They can fail on unrelated changes, or include unrelated formatting changes in the same commit.","This reality becomes a self-fulfilling cycle: pre-commit hooks aren't ubiquitous, so they cause pain, so we avoid using them. But they'll never be ubiquitous because skipping them is so easy - forgetting to install, disabling them, or bypassing with git commit --no-verify."]},{"i":"speed--time","l":"Speed & Time","p":["Pre-commit hooks run synchronously, on the developer's machine, while the developer is waiting for feedback.","Pre-commit hooks run frequently. I create small frequent commits, using tools like git commit --fixup and git absorb. Even fixing a commit message with git commit --amend will run hooks.","Pre-commit hooks must be blazingly fast.","How long before developers start skipping? Not very long. If git commit is taking over 1 second, I'll Ctrl+ C it and add --no-verify. After skipping hooks a few times, I disable them. I've never worked in a project where I kept them on for long, and it would be more accurate to say \"I don't use pre-commit hooks\"."]},{"l":"Conclusion","p":["When the pre-commit framework was announced in 2021, the top comments were now-familiar rebuttals.","Whatever test runs during pre-commit must also run during normal CI/CD run... It must run during normal CI/CD because pre-commit hooks can be skipped. So now I have two different black calls: in the pre-commit hook and in the CI/CD. And they must be of the same version. Ad infinitum for all other tests. This is the reason I don't use pre-commit framework. It leads to \"double accounting\".","and:","The CI check is the important one: It's what ensures that bad formatting doesn't make it into master. The pre-commit is just a convenience for the developer. It gives faster feedback - immediately when trying to commit, instead of a couple of minutes later. And if a developer on my team wants to disable it, it doesn't affect others.","Fans of pre-commit hooks describe a framework that's new but growing into an industry standard.","I think I'm writing to dispel that notion. pre-commit.com is new, but pre-commit hooks are not. Pre-commit suffer from tragedy of the commons, they will never become ubiquitous, and you shouldn't feel guilty about turning them off."]},{"l":"Comments","p":["Leave a comment on medium"]}],[{"i":"jetbrains-ides-hidden-features-syntax-highlighting","l":"JetBrains IDEs hidden features: Syntax Highlighting","p":["JetBrains has added powerful improvements to their IDE over the years, but leaves some features disabled in the default configuration. If my colleagues are representative, most users don't know these features exist.","Here, we're going to look at syntax highlighting. The default schemes only assign colors to a few token types. My goal is for you to be aware of the token types that are available, and to customize more of them.","And JetBrains, I want you to help change the defaults!"]},{"i":"whats-off","l":"What's off?","p":["I'll use this Java code to test out syntax highlighting in IntelliJ. But everything here applies to all JetBrains IDEs and languages.","Here's what the code looks like with IntelliJ's default light theme.","And here's what it looks like with my light theme.","And here's my dark theme."]},{"i":"tldr","l":"TL;DR","p":["If you just want to use my settings, you can get them here.","If you want to know what the colors mean, read on."]},{"l":"Color Semantics"},{"l":"Foreground colors for concrete and abstract","p":["I use a maroon color to represent concreteness(in classes and methods) and a teal color to represent abstractness.","Interfaces are teal","Concrete classes are maroon","Abstract classes are maroon with a teal underline","Method calls are underlined with teal if the method is defined in an interface.","Method calls are underlined with maroon if the method is defined in a superclass."]},{"l":"Italics and bold for static and mutability","p":["I use italics to represent static.","I use bold to represent mutability.","Fields that are non-final, both static and non-static, are bold","Parameters that get reassigned are bold","Variables that get reassigned are bold, including loop variables"]},{"l":"Background colors for errors","p":["I use background colors to represent errors, warnings, and weak warnings."]},{"l":"Differences from defaults","p":["IntelliJ ships with 4 predefined color schemes: Classic Light, Darcula, High contrast, and IntelliJ Light. Plugins can add more."]},{"l":"Foreground colors","p":["The default themes do not use many colors, and few token types are customized. Classes, interfaces, parameters, local variables, and method calls have no customization and are displayed as default text.","The default themes have custom foreground colors for keywords, fields, numbers, and string literals. I've kept these colors unchanged in my themes."]},{"l":"Italics and bold","p":["The default themes use italics to represent static, which I kept unchanged.","I use bold to emphasize mutability. This can help when stepping through code in the debugger. Only the bolded names can have their values change over time.","IntelliJ Light doesn't use bold. Classic Light uses bold for keywords, instance fields, and static final fields, but not static non-final fields.","If there is some meaning behind bold in this theme, I haven't figured it out."]},{"l":"Errors and warnings","p":["The default themes use a mix of background colors and text decorations to show errors, warnings, and weak warnings.","Text decorations can shadow each other.","Here, the underline for reassignment is obscured by the underwave for the type error."]},{"l":"Configuration","p":["To configure your own color scheme:","Open the IDE settings, go to Settings > Editor > Color Scheme.","Choose a built-in scheme, like IntelliJ Light or Darcula.","Click the gear icon, and choose Duplicate...","Give it a name and choose Apply.","Next it's helpful to look at a specific language. I'll click Java."]},{"l":"Quick config","p":["Clicking an element in the preview pane will jump to its token type in the color scheme editor.","(Clicking a parameter jumps to the settings for parameters.)","This makes it easy to discover the various token types, and can make it quick to set up a new color scheme. However, we usually don't want to apply our config here at the \"leaves.\""]},{"l":"Config tree","p":["The token types that we can configure are organized into a hierarchy. Each token type either has custom display settings, or uses the settings from the parent type. The \"Inherit values from\" pane has a hyperlink we can click to jump to the parent type. Following one example chain:","Java > Constant (static final imported field)","Java > Constant (static final field)","Java > Static field","Language Defaults > Static field","Language Defaults > Default","General > Default text","It's best to configure the token types as high in the hierarchy as possible, in \"Language Defaults\" or \"General\" whenever possible. Settings here will apply to all programming languages, which is especially helpful when working with a new language.","Let's say we're reading Scala code for the first time, so we're not yet familiar with traits.","We can see that the trait is highlighted teal, a strong hint that traits are similar to interfaces.","Out of the box, my theme works pretty well for Scala.","With a bit of language-specific tweaking, we can make it even better. If we can keep the tweaks to a minimum, we will have a consistent experience across languages."]},{"l":"Conclusion","p":["You already knew that JetBrains IDEs support syntax highlighting, but hopefully you learned something about how powerful the highlighting engine is. If you're already configuring your own color scheme, I'd love to see your setup.","What other features should folks know more about, where the IDE ships with them disabled by default?"]},{"l":"Comments","p":["Leave a comment on medium"]}],[{"l":"How to pick colors for a syntax highlighting theme","p":["After I shared JetBrains IDEs hidden features: Syntax Highlighting, my coworker asked these thought-provoking questions.","How did you pick the colors?","What is the relationship of the colors to each other?","Do you see the code differently?","I'll share my answers here."]},{"i":"how-did-you-pick-the-colors","l":"How did you pick the colors?","p":["I first played with syntax highlighting over a decade ago. The first thing I noticed was that you don't assign a color to types. Rather, you assign colors to classes and interfaces. I was blown away.","Most syntax highlighters use lexing and parsing. JetBrains IDEs do too, for basic syntax highlighting, but this highlighting is driven by full semantic analysis.","I decided to assign very different colors to classes and interfaces.","#AA0000#AA0000 maroon for classes","#00AAAA#00AAAA teal for interfaces","#AA0000#00AAAA","Other settings I've changed over the years, but these colors stuck."]},{"l":"50 Shades of Blue","p":["This got me thinking about how many distinct colors I could come up with. How many colors I could add to the theme before they start to get \"crowded\" and hard to distinguish?","The default light theme IntelliJ light, uses three shades of dark blue.","#1750EB#1750EB for Numbers","#0033B3#0033B3 for Keywords","#0037A6#0037A6 for valid escape sequences","#1750EB#0033B3#0037A6","As swatches, I find two of them hard to distinguish.","As foreground text, I can barely tell them apart. I didn't even realize these are separate colors until now, writing this up.","The whole point of syntax highlighting is to convey information at a glance; even subconsciously. Are these three slightly different shades of blue really conveying information to us?"]},{"i":"which-colors-will-we-use","l":"Which colors will we use?","p":["Let's turn our attention to the whole rainbow and figure out which colors we will use.","#F54400 We eliminate red, since that will be used for errors.","#F5EAC1 We eliminate yellow, because it's hard to read in a light theme.","We've already used #AA0000 maroon and #00AAAA teal.","We still have 5 colors left with plenty of contrast: #FF8800 orange, #00AA00 green, #1750EB blue, #871094 purple, and #FF15B4 pink.","#FF8800#00AA00#1750EB#871094#FF15B4","But there are more than 5 token types left. We have two options:","Squeeze in more colors, by using two shades of blue, two shades of green, etc.","Assign the same color to multiple token types where they won't get confused with each other."]},{"i":"what-is-the-relationship-of-the-colors-to-each-other","l":"What is the relationship of the colors to each other?","p":["Those three shades of blue discussed above are nearly indistinguishable to me, yet I never get the tokens confused for each other. Why not? Context from syntax.","Escape sequences don't get confused with anything else, because they're inside a string. Numbers don't get confused with anything else, because they're numbers!","There's a chance that keywords could be confused with an identifier, at a glance. The token var could be the name of a local, parameter, or field.","This leads to my main point about the relationship of the colors to each other. We have a finite palette of visually distinct colors. Contrast is a scarce resource which we only spend to resolve ambiguity.","Classes, interfaces, and generic type parameters should use distinct colors.","Javadoc comments should have a color distinct from line and block comments.","Keywords, parameters, locals, and fields should use distinct colors.","We should not reuse a color within each group, but it's ok to reuse colors across groups."]},{"l":"Base Themes","p":["bold and italics as described in my previous post","gray for semi-colons","green for locals","green for strings","I kept:","I restored:","I thought about this in the context of \"spending contrast\" and decided it would be better to restore default settings where possible. This turned out to be easy. There's simply not much in the default theme. The few tokens that are colored in the default theme are not the ones with ambiguity.","maroon for classes","orange for parameters","pink for commas","purple for fields","teal for function/method declarations","teal for interfaces","the 3 blues for keywords, numbers, and escape sequences","When I first created my own theme, I started with IntelliJ Light as the \"base theme\" but then I assigned new colors to every single token type. During pair programming, coworkers noticed the bright colorful text. But I wasn't convinced that the effect was useful. I felt I had gone overboard, and that the color scheme was disorienting.","When we create our own themes, we must start by copying an existing theme. We can't just create a new theme from scratch."]},{"l":"Dark Mode","p":["#00AA00#00AA00→ #00FF00#00FF00 green","#00AA00→ #00FF00","#00AAAA#00AAAA→ #00FFFF#00FFFF teal","#00AAAA→ #00FFFF","#AA0000→ #DD4488","Darcula was added in 2012.","However, JetBrains did add a keyboard shortcut Ctrl+ ` for quickly switching between themes. At that point, I was motivated to create a dark theme.","I couldn't just fully saturate maroon #AA0000#AA0000 because that would give red #FF0000#FF0000 which is used for errors. I just kept lightening till I got pink #DD4488#DD4488","I took basic colors and fully saturated them.","I've been using JetBrains IDEs since 2007.","IntelliJ still doesn't have support for switching between light/dark automatically.","My first thought was there must exist an algorithm that can automatically convert a light theme into a dark theme. I couldn't find such an algorithm. Yet I think I came up with something close.","Operating system support was added to OSX in 2018 and to iOS in 2019.","Other Darcula choices are quite different than their IntelliJ light counterparts. Keywords are orange and method/function declarations are yellow. I kept the defaults and played a bit of musical chairs with the colors.","Some Darcula choices also are lighter, more saturated versions of their IntelliJ Light counterparts. For example, numbers use a lighter, more saturated blue.","Young engineers might not realize we haven't always had dark mode."]},{"l":"Font","p":["I experimented with fonts and ligatures.","Some fonts are difficult to set up on some operating systems. Even when we get them working, not all fonts look great across all operating systems.","In 2020, JetBrains created their own font called JetBrains Mono. I started using it immediately and haven't looked back.","The font ships with the IDE so there's no setup effort. It consistently looks great across all operating systems. There are other fonts that look marginally better, but aren't worth the effort to me.","People still use 80-character wide lines, as if we're still using 1024 x 768 CRT monitors. I won't try to convince you to increase your line length, but please increase the font size. My changes:","Font size from 13.0 to 17.0","Line height from 1.2 to 1.05","Use soft wraps in editor: true","Console font size to 12.0","Console line height to 1.05","Use soft wraps in console: true"]},{"i":"do-you-see-the-code-differently","l":"Do you see the code differently?","p":["Yes! It's a big topic, and I still haven't talked about Inspections. Stay tuned."]},{"l":"Comments","p":["Leave a comment on medium"]}],[{"l":"Additional IntelliJ Live Templates for Java","p":["Use live templates to insert common constructs into your code, such as loops, conditions, various declarations, or print statements.","For example, the built-in template called psvm inserts a main method.","intellij-live-psvm","Here are a few live templates I've added for Java. They are available for download here.","To import them you can just copy the xml definition(s) into your clipboard, navigate to Preferences | Editor | Live Templates, and paste."]},{"i":"log-a-value-to-loggerinfo","l":"Log a value to LOGGER.info","p":["IntelliJ has a built-in template for printing a value to System.out, invoked using soutv.","Here's a similar one called logv for loging using slf4j.","intellij-live-logv","I created logv by copying soutv and editing it. But you can just copy the xml definition."]},{"l":"Create an slf4j Logger","p":["Before we can use logv we'll need an instance of an slf4j Logger. Usually, we want to name Loggers after the class they're declared inside.","Definition:"]},{"l":"Create an slf4j Marker","p":["Slf4j Markers can be used to filter log messages by something other than log level and name. They're like named tags for your log statements.","The declaration of a Marker looks a lot like a Logger, except we need to pick a name.","intellij-live-Mark","Definition:"]},{"l":"Add a TODO with a date","p":["TODO comments should usually be accompanied by the date they were added, since recent TODOs often deserve more attention than older ones.","intellij-live-todo","Definition:"]},{"i":"fill-method-body-thats-not-implemented-yet","l":"Fill method body that's not implemented yet","p":["When implementing an interface, it can be useful to leave some of the methods unimplemented but still throw a helpful exception.","Sometimes you'll want to leave the exception in production code. Sometimes it's just for a moment, just to get your code to compile.","intellij-live-yet","Definition:"]},{"l":"Suppress default constructor for noninstantiability","p":["Effective Java Item 4 is \"Enforce noninstantiability with a private constructor.\"","Utility classes were not designed to be instantiated: an instance would be nonsensical. In the absence of explicit constructors, however, the compiler provides a public, parameterless default constructor...","A default constructor is generated only if a class contains no explicit constructors, so a class can be made noninstantiable by including a private constructor.","And it provides an example constructor.","I prefer to move the comment into a string.","intellij-live-util","Definition:"]},{"l":"Surround with Region markers in XML","p":["IntelliJ's \"Surround with...\" functionality lets you surround code with Region markers, but only in some languages, not including XML.","Region markers give a foldable region with a label. If we surround a Java main method, we'll see a minus icon in the gutter that lets us collapse the region...","... down to just the label.","To get this same functionality in XML, we need to add a live template.","Abbreviation:","region","Description:","Surround with region marker","Template text:"]},{"l":"Variables"},{"l":"Comments","p":["Leave a comment on medium"]}],[{"l":"IntelliJ postfix completions","p":["IntelliJ’s postfix completions were announced in 2014 but remain relatively unknown. Postfix code completion helps reduce backward caret jumps as you write code. You use it as if you’re auto-completing a method name, but with the name of a postfix template.","Here are a few postfix completions I’ve added for Java. They are available for download here."]},{"l":"Rethrow checked exception as runtime exception","p":["Before: EXPR.rethrow","After: throw new RuntimeException( EXPR);","Applicable type: java.lang.Exception"]},{"l":"Adapt a collection with Eclipse Collections","p":["Before: EXPR.adapt","After: org.eclipse.collections.impl.list.mutable.ListAdapter.adapt( EXPR)","Applicable type: java.util.List","In addition to ListAdapter, I have equivalent rules for SetAdapter, MapAdapter, and ArrayAdapter. Since each applies to a specific type, it’s not a problem for all 4 to share the same key “adapt”."]},{"l":"Comments","p":["Leave a comment on medium"]}],[{"l":"Maven Best Practices"},{"l":"Specify a parent pom","p":["There are a number of best practices that can be handled at once by inheriting from a parent pom that takes care of them all. The following sections cover resource encodings and reproducible builds. As an alterantive, declare a parent pom on liftwizard-minimal-parent which handles all of these."]},{"l":"Resource encoding","p":["If you don't specify a resource encoding, you may encounter a warning from maven-resources-plugin like: [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!","You can fix it by specifying a character encoding scheme.","This will become unnecessary starting with Maven 4.x."]},{"l":"Reproducible builds","p":["A build is reproducible if given the same source code, build environment and build instructions, any party can recreate bit-by-bit identical copies of all specified artifacts.","You can enable Reproducible Builds mode for plugins by specifying the following property.","You will need to run mvn artifact:check-buildplan and mvn verify artifact:compare as described in the guide to ensure builds are reproducible."]},{"l":"Default Goal","p":["You can specify the default goal to run when you run mvn without any arguments.","verify is a better choice than install in the presence of concurrent builds that may write to .m2/repository simultaneously.","verify is a better choice than clean verify because clean is a destructive operation, users may not expect it to be run by default, and it's easy to run mvn clean when you need it."]},{"l":"Plugins which are bound and enabled by default","p":["3.1.1","3.11.0","3.2.2","3.3.0","3.3.1","compile","deploy","install","jar","Maven binds some plugins to the “main” phases, even if you don’t declare any plugins in your pom.xml.","Maven builds are configured by binding plugins to maven's lifecycle phases.","maven-compiler-plugin","maven-deploy-plugin","maven-install-plugin","maven-jar-plugin","maven-resources-plugin","maven-surefire-plugin","Phase","Plugin","resources","test","testCompile","testResources","The versions of the default plugins changes between maven versions, and even the list of plugins grows over time. Maven 3.9.6 binds:","Version","We can support reproducible builds even with different versions of maven as long as all the plugin versions are the same. To enable plugin consistency across a team, we specify versions of the plugins in the parent pom."]}],[{"l":"Maven pom-packaging modules","p":["Maven's packaging declaration defines the \"the default list of goals which execute on each corresponding build lifecycle stage for a particular package structure.\"","When no packaging is declared, Maven assumes the packaging is the default: jar.","This post describes the uses for packagingpom/packaging.","Pom-only modules have no jar artifact. The pom may serve multiple purposes. Use the artifactId and name to make the purpose clear.","Internal Bill of Materials: library-dependencies","Published Bill of Materials: library-bom","Internal aggregator: library-project","Published parent: library-parent"]},{"l":"Bill of Materials","p":["A bill of materials declares a set of dependency versions. Importing a BOM doesn’t force a project to use every dependency declared inside. When the importing project does use one of the dependencies, it gets the version declared in the BOM.","There are two flavors of BOMs, ones used inside a library, and ones published for users of the library."]},{"l":"Internal Bill of Materials","p":["Internal BOMs have names like library-dependencies and are imported or used as a parent elsewhere in the same multi-module project.","dropwizard-dependencies/pom.xml is Dropwizard's internal BOM. It declares versions of the third-party software that Dropwizard depends on."]},{"l":"External Bill of Materials","p":["External BOMs, or just BOMs, have names like library-bom. They are designed to be used together with the jars that make up a multi-module library.","dropwizard-bom/pom.xml is published with Dropwizard. It declares versions of every jar that ships as part of Dropwizard.","Users can import the BOM with import scope in the dependencyManagement section.","Once imported, projects can depend on jars within Dropwizard without repeating the version number many times."]},{"l":"Aggregator pom","p":["In a multi-module project, most leaf nodes have jar packaging. All non-leaf nodes have pom packaging and are aggregators. Aggregator poms are intermediate nodes in multi-module projects that declare a list of modules as children. They can have any artifactId. They should declare a name like name… (Module Group)/name. An example is Liftwizard’s liftwizard-clock/pom.xml which gathers all the clock-related modules into a subdirectory.","Aggregators only affect which modules are included in the build. The included modules do not inherit configuration from the aggregator unless they also use inheritance."]},{"l":"Parent pom","p":["Maven supports inheritance of configuration from a parent pom. A child declares its parent in a parent section. Within a multi-module project it’s common for the parent to be an aggregator, which includes the child in its list of modules. In other words, it’s common for the parent-child relationship to be bidirectional, but this is not required."]},{"l":"Project pom","p":["A common pattern is for the pom at the root of a multi-module project to be both an aggregator and a parent, and sometimes a grandparent. A parent pom that is meant to be used within a project should have a name like library-project, like Dropwizard’s dropwizard-project/pom.xml. A parent pom that is meant to be used by other projects should have a name like library-parent.","Leave comments on medium."]},{"l":"Comments","p":["Leave a comment on medium"]}]]
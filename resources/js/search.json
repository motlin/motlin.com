[[{"l":"Welcome","p":["Static site motlin.com","The same content is available with commenting enabled at motlin.medium.com"]}],[{"l":"Additional IntelliJ Live Templates for Java","p":["Use live templates to insert common constructs into your code, such as loops, conditions, various declarations, or print statements.","For example, the built-in template called psvm inserts a main method.","intellij-live-psvm","Here are a few live templates I've added for Java. They are available for download here.","To import them you can just copy the xml definition(s) into your clipboard, navigate to Preferences | Editor | Live Templates, and paste."]},{"i":"log-a-value-to-loggerinfo","l":"Log a value to LOGGER.info","p":["IntelliJ has a built-in template for printing a value to System.out, invoked using soutv.","Here's a similar one called logv for loging using slf4j.","intellij-live-logv","I created logv by copying soutv and editing it. But you can just copy the xml definition."]},{"l":"Create an slf4j Logger","p":["Before we can use logv we'll need an instance of an slf4j Logger. Usually, we want to name Loggers after the class they're declared inside.","Definition:"]},{"l":"Create an slf4j Marker","p":["Slf4j Markers can be used to filter log messages by something other than log level and name. They're like named tags for your log statements.","The declaration of a Marker looks a lot like a Logger, except we need to pick a name.","intellij-live-Mark","Definition:"]},{"l":"Add a TODO with a date","p":["TODO comments should usually be accompanied by the date they were added, since recent TODOs often deserve more attention than older ones.","intellij-live-todo","Definition:"]},{"i":"fill-method-body-thats-not-implemented-yet","l":"Fill method body that's not implemented yet","p":["When implementing an interface, it can be useful to leave some of the methods unimplemented but still throw a helpful exception.","Sometimes you'll want to leave the exception in production code. Sometimes it's just for a moment, just to get your code to compile.","intellij-live-yet","Definition:"]},{"l":"Suppress default constructor for noninstantiability","p":["Effective Java Item 4 is \"Enforce noninstantiability with a private constructor.\"","Utility classes were not designed to be instantiated: an instance would be nonsensical. In the absence of explicit constructors, however, the compiler provides a public, parameterless default constructor...","A default constructor is generated only if a class contains no explicit constructors, so a class can be made noninstantiable by including a private constructor.","And it provides an example constructor.","I prefer to move the comment into a string.","intellij-live-util","Definition:"]},{"l":"Surround with Region markers in XML","p":["IntelliJ's \"Surround with...\" functionality lets you surround code with Region markers, but only in some languages, not including XML.","Region markers give a foldable region with a label. If we surround a Java main method, we'll see a minus icon in the gutter that lets us collapse the region...","... down to just the label.","To get this same functionality in XML, we need to add a live template.","Abbreviation:","region","Description:","Surround with region marker","Template text:"]},{"l":"Variables"}],[{"l":"How to pick colors for a syntax highlighting theme","p":["After I shared JetBrains IDEs hidden features: Syntax Highlighting, my coworker asked these thought-provoking questions.","How did you pick the colors?","What is the relationship of the colors to each other?","Do you see the code differently?","I'll share my answers here."]},{"i":"how-did-you-pick-the-colors","l":"How did you pick the colors?","p":["I first played with syntax highlighting over a decade ago. The first thing I noticed was that you don't assign a color to types. Rather, you assign colors to classes and interfaces. I was blown away.","Most syntax highlighters use lexing and parsing. JetBrains IDEs do too, for basic syntax highlighting, but this highlighting is driven by full semantic analysis.","I decided to assign very different colors to classes and interfaces.","#AA0000#AA0000 maroon for classes","#00AAAA#00AAAA teal for interfaces","#AA0000#00AAAA","Other settings I've changed over the years, but these colors stuck."]},{"l":"50 Shades of Blue","p":["This got me thinking about how many distinct colors I could come up with. How many colors I could add to the theme before they start to get \"crowded\" and hard to distinguish?","The default light theme IntelliJ light, uses three shades of dark blue.","#1750EB#1750EB for Numbers","#0033B3#0033B3 for Keywords","#0037A6#0037A6 for valid escape sequences","#1750EB#0033B3#0037A6","As swatches, I find two of them hard to distinguish.","As foreground text, I can barely tell them apart. I didn't even realize these are separate colors until now, writing this up.","The whole point of syntax highlighting is to convey information at a glance; even subconsciously. Are these three slightly different shades of blue really conveying information to us?"]},{"i":"which-colors-will-we-use","l":"Which colors will we use?","p":["Let's turn our attention to the whole rainbow and figure out which colors we will use.","#F54400 We eliminate red, since that will be used for errors.","#F5EAC1 We eliminate yellow, because it's hard to read in a light theme.","We've already used #AA0000 maroon and #00AAAA teal.","We still have 5 colors left with plenty of contrast: #FF8800 orange, #00AA00 green, #1750EB blue, #871094 purple, and #FF15B4 pink.","#FF8800#00AA00#1750EB#871094#FF15B4","But there are more than 5 token types left. We have two options:","Squeeze in more colors, by using two shades of blue, two shades of green, etc.","Assign the same color to multiple token types where they won't get confused with each other."]},{"i":"what-is-the-relationship-of-the-colors-to-each-other","l":"What is the relationship of the colors to each other?","p":["Those three shades of blue discussed above are nearly indistinguishable to me, yet I never get the tokens confused for each other. Why not? Context from syntax.","Escape sequences don't get confused with anything else, because they're inside a string. Numbers don't get confused with anything else, because they're numbers!","There's a chance that keywords could be confused with an identifier, at a glance. The token var could be the name of a local, parameter, or field.","This leads to my main point about the relationship of the colors to each other. We have a finite palette of visually distinct colors. Contrast is a scarce resource which we only spend to resolve ambiguity.","Classes, interfaces, and generic type parameters should use distinct colors.","Javadoc comments should have a color distinct from line and block comments.","Keywords, parameters, locals, and fields should use distinct colors.","We should not reuse a color within each group, but it's ok to reuse colors across groups."]},{"l":"Base Themes","p":["bold and italics as described in my previous post","gray for semi-colons","green for locals","green for strings","I kept:","I restored:","I thought about this in the context of \"spending contrast\" and decided it would be better to restore default settings where possible. This turned out to be easy. There's simply not much in the default theme. The few tokens that are colored in the default theme are not the ones with ambiguity.","maroon for classes","orange for parameters","pink for commas","purple for fields","teal for function/method declarations","teal for interfaces","the 3 blues for keywords, numbers, and escape sequences","When I first created my own theme, I started with IntelliJ Light as the \"base theme\" but then I assigned new colors to every single token type. During pair programming, coworkers noticed the bright colorful text. But I wasn't convinced that the effect was useful. I felt I had gone overboard, and that the color scheme was disorienting.","When we create our own themes, we must start by copying an existing theme. We can't just create a new theme from scratch."]},{"l":"Dark Mode","p":["#00AA00#00AA00→ #00FF00#00FF00 green","#00AA00→ #00FF00","#00AAAA#00AAAA→ #00FFFF#00FFFF teal","#00AAAA→ #00FFFF","#AA0000→ #DD4488","Darcula was added in 2012.","However, JetBrains did add a keyboard shortcut Ctrl+ ` for quickly switching between themes. At that point, I was motivated to create a dark theme.","I couldn't just fully saturate maroon #AA0000#AA0000 because that would give red #FF0000#FF0000 which is used for errors. I just kept lightening till I got pink #DD4488#DD4488","I took basic colors and fully saturated them.","I've been using JetBrains IDEs since 2007.","IntelliJ still doesn't have support for switching between light/dark automatically.","My first thought was there must exist an algorithm that can automatically convert a light theme into a dark theme. I couldn't find such an algorithm. Yet I think I came up with something close.","Operating system support was added to OSX in 2018 and to iOS in 2019.","Other Darcula choices are quite different than their IntelliJ light counterparts. Keywords are orange and method/function declarations are yellow. I kept the defaults and played a bit of musical chairs with the colors.","Some Darcula choices also are lighter, more saturated versions of their IntelliJ Light counterparts. For example, numbers use a lighter, more saturated blue.","Young engineers might not realize we haven't always had dark mode."]},{"l":"Font","p":["I experimented with fonts and ligatures.","Some fonts are difficult to set up on some operating systems. Even when we get them working, not all fonts look great across all operating systems.","In 2020, JetBrains created their own font called JetBrains Mono. I started using it immediately and haven't looked back.","The font ships with the IDE so there's no setup effort. It consistently looks great across all operating systems. There are other fonts that look marginally better, but aren't worth the effort to me.","People still use 80-character wide lines, as if we're still using 1024 x 768 CRT monitors. I won't try to convince you to increase your line length, but please increase the font size. My changes:","Font size from 13.0 to 17.0","Line height from 1.2 to 1.05","Use soft wraps in editor: true","Console font size to 12.0","Console line height to 1.05","Use soft wraps in console: true"]},{"i":"do-you-see-the-code-differently","l":"Do you see the code differently?","p":["Yes! It's a big topic, and I still haven't talked about Inspections. Stay tuned."]}],[{"l":"IntelliJ postfix completions","p":["IntelliJ’s postfix completions were announced in 2014 but remain relatively unknown. Postfix code completion helps reduce backward caret jumps as you write code. You use it as if you’re auto-completing a method name, but with the name of a postfix template.","Here are a few postfix completions I’ve added for Java. They are available for download here."]},{"l":"Rethrow checked exception as runtime exception","p":["Before: EXPR.rethrow","After: throw new RuntimeException( EXPR);","Applicable type: java.lang.Exception"]},{"l":"Adapt a collection with Eclipse Collections","p":["Before: EXPR.adapt","After: org.eclipse.collections.impl.list.mutable.ListAdapter.adapt( EXPR)","Applicable type: java.util.List","In addition to ListAdapter, I have equivalent rules for SetAdapter, MapAdapter, and ArrayAdapter. Since each applies to a specific type, it’s not a problem for all 4 to share the same key “adapt”."]}],[{"i":"jetbrains-ides-hidden-features-syntax-highlighting","l":"JetBrains IDEs hidden features: Syntax Highlighting","p":["JetBrains has added powerful improvements to their IDE over the years, but leaves some features disabled in the default configuration. If my colleagues are representative, most users don't know these features exist.","Here, we're going to look at syntax highlighting. The default schemes only assign colors to a few token types. My goal is for you to be aware of the token types that are available, and to customize more of them.","And JetBrains, I want you to help change the defaults!"]},{"i":"whats-off","l":"What's off?","p":["I'll use this Java code to test out syntax highlighting in IntelliJ. But everything here applies to all JetBrains IDEs and languages.","Here's what the code looks like with IntelliJ's default light theme.","And here's what it looks like with my light theme.","And here's my dark theme."]},{"i":"tldr","l":"TL;DR","p":["If you just want to use my settings, you can get them here.","If you want to know what the colors mean, read on."]},{"l":"Color Semantics"},{"l":"Foreground colors for concrete and abstract","p":["I use a maroon color to represent concreteness(in classes and methods) and a teal color to represent abstractness.","Interfaces are teal","Concrete classes are maroon","Abstract classes are maroon with a teal underline","Method calls are underlined with teal if the method is defined in an interface.","Method calls are underlined with maroon if the method is defined in a superclass."]},{"l":"Italics and bold for static and mutability","p":["I use italics to represent static.","I use bold to represent mutability.","Fields that are non-final, both static and non-static, are bold","Parameters that get reassigned are bold","Variables that get reassigned are bold, including loop variables"]},{"l":"Background colors for errors","p":["I use background colors to represent errors, warnings, and weak warnings."]},{"l":"Differences from defaults","p":["IntelliJ ships with 4 predefined color schemes: Classic Light, Darcula, High contrast, and IntelliJ Light. Plugins can add more."]},{"l":"Foreground colors","p":["The default themes do not use many colors, and few token types are customized. Classes, interfaces, parameters, local variables, and method calls have no customization and are displayed as default text.","The default themes have custom foreground colors for keywords, fields, numbers, and string literals. I've kept these colors unchanged in my themes."]},{"l":"Italics and bold","p":["The default themes use italics to represent static, which I kept unchanged.","I use bold to emphasize mutability. This can help when stepping through code in the debugger. Only the bolded names can have their values change over time.","IntelliJ Light doesn't use bold. Classic Light uses bold for keywords, instance fields, and static final fields, but not static non-final fields.","If there is some meaning behind bold in this theme, I haven't figured it out."]},{"l":"Errors and warnings","p":["The default themes use a mix of background colors and text decorations to show errors, warnings, and weak warnings.","Text decorations can shadow each other.","Here, the underline for reassignment is obscured by the underwave for the type error."]},{"l":"Configuration","p":["To configure your own color scheme:","Open the IDE settings, go to Settings > Editor > Color Scheme.","Choose a built-in scheme, like IntelliJ Light or Darcula.","Click the gear icon, and choose Duplicate...","Give it a name and choose Apply.","Next it's helpful to look at a specific language. I'll click Java."]},{"l":"Quick config","p":["Clicking an element in the preview pane will jump to its token type in the color scheme editor.","(Clicking a parameter jumps to the settings for parameters.)","This makes it easy to discover the various token types, and can make it quick to set up a new color scheme. However, we usually don't want to apply our config here at the \"leaves.\""]},{"l":"Config tree","p":["The token types that we can configure are organized into a hierarchy. Each token type either has custom display settings, or uses the settings from the parent type. The \"Inherit values from\" pane has a hyperlink we can click to jump to the parent type. Following one example chain:","Java > Constant (static final imported field)","Java > Constant (static final field)","Java > Static field","Language Defaults > Static field","Language Defaults > Default","General > Default text","It's best to configure the token types as high in the hierarchy as possible, in \"Language Defaults\" or \"General\" whenever possible. Settings here will apply to all programming languages, which is especially helpful when working with a new language.","Let's say we're reading Scala code for the first time, so we're not yet familiar with traits.","We can see that the trait is highlighted teal, a strong hint that traits are similar to interfaces.","Out of the box, my theme works pretty well for Scala.","With a bit of language-specific tweaking, we can make it even better. If we can keep the tweaks to a minimum, we will have a consistent experience across languages."]},{"l":"Conclusion","p":["You already knew that JetBrains IDEs support syntax highlighting, but hopefully you learned something about how powerful the highlighting engine is. If you're already configuring your own color scheme, I'd love to see your setup.","What other features should folks know more about, where the IDE ships with them disabled by default?"]}],[{"i":"pre-commit-or-cicd","l":"Pre-Commit or CI/CD","p":["At work, we're moving from a proprietary SDLC to a more open-source process. This shift has prompted questions that have me re-evaluating aspects of the development process I've long taken for granted.","One recurring question is whether linting tools should run as part of the continuous integration/continuous deployment (CI/CD) pipeline, as pre-commit hooks, or both. Let's explore the pros and cons."]},{"l":"Pre-commit hooks","p":["Why push code that won't pass the linter? With CI/CD, the developers get feedback only after they've pushed their changes.","Pre-commit hooks get feedback to the developer as soon as possible."]},{"i":"cicd","l":"CI/CD","p":["Pre-commit hooks must be installed in every development environment, for every new joiner.","The main benefit of running linters as part of the CI/CD pipeline is uniform enforcement. A linter in the CI/CD pipeline cannot be forgotten."]},{"i":"pre-commit-hooks-would-be-great-if-everyone-would-just-use-them","l":"Pre-commit hooks would be great, if everyone would just use them","p":["In pre-commit utopia, everyone runs pre-commit hooks, making CI/CD linting redundant.","If even one contributor doesn't use pre-commit hooks, the hooks cause issues for everyone else. They can fail on unrelated changes, or include unrelated formatting changes in the same commit.","This reality becomes a self-fulfilling cycle: pre-commit hooks aren't ubiquitous, so they cause pain, so we avoid using them. But they'll never be ubiquitous because skipping them is so easy - forgetting to install, disabling them, or bypassing with git commit --no-verify."]},{"i":"speed--time","l":"Speed & Time","p":["Pre-commit hooks run synchronously, on the developer's machine, while the developer is waiting for feedback.","Pre-commit hooks run frequently. I create small frequent commits, using tools like git commit --fixup and git absorb. Even fixing a commit message with git commit --amend will run hooks.","Pre-commit hooks must be blazingly fast.","How long before developers start skipping? Not very long. If git commit is taking over 1 second, I'll Ctrl+ C it and add --no-verify. After skipping hooks a few times, I disable them. I've never worked in a project where I kept them on for long, and it would be more accurate to say \"I don't use pre-commit hooks\"."]},{"l":"Conclusion","p":["When the pre-commit framework was announced in 2021, the top comments were now-familiar rebuttals.","Whatever test runs during pre-commit must also run during normal CI/CD run... It must run during normal CI/CD because pre-commit hooks can be skipped. So now I have two different black calls: in the pre-commit hook and in the CI/CD. And they must be of the same version. Ad infinitum for all other tests. This is the reason I don't use pre-commit framework. It leads to \"double accounting\".","and:","The CI check is the important one: It's what ensures that bad formatting doesn't make it into master. The pre-commit is just a convenience for the developer. It gives faster feedback - immediately when trying to commit, instead of a couple of minutes later. And if a developer on my team wants to disable it, it doesn't affect others.","Fans of pre-commit hooks describe a framework that's new but growing into an industry standard.","I think I'm writing to dispel that notion. pre-commit.com is new, but pre-commit hooks are not. Pre-commit suffer from tragedy of the commons, they will never become ubiquitous, and you shouldn't feel guilty about turning them off."]}]]